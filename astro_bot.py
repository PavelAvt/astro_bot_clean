import os
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from openai import OpenAI
from datetime import datetime
import requests
import schedule
import time
from database import add_user, get_all_users

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CHANNEL_LINK = "https://t.me/+lqPB3ppoz7EzMWFi"
CHANNEL_NAME = "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω–µss"

bot = telebot.TeleBot(BOT_TOKEN)
openai_client = OpenAI(api_key=OPENAI_API_KEY)
user_data = {}

zodiac_signs = [
    "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞",
    "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
]

zodiac_emojis = {
    "–û–≤–µ–Ω": "‚ôàÔ∏è", "–¢–µ–ª–µ—Ü": "‚ôâÔ∏è", "–ë–ª–∏–∑–Ω–µ—Ü—ã": "‚ôäÔ∏è", "–†–∞–∫": "‚ôãÔ∏è",
    "–õ–µ–≤": "‚ôåÔ∏è", "–î–µ–≤–∞": "‚ôçÔ∏è", "–í–µ—Å—ã": "‚ôéÔ∏è", "–°–∫–æ—Ä–ø–∏–æ–Ω": "‚ôèÔ∏è",
    "–°—Ç—Ä–µ–ª–µ—Ü": "‚ôêÔ∏è", "–ö–æ–∑–µ—Ä–æ–≥": "‚ôëÔ∏è", "–í–æ–¥–æ–ª–µ–π": "‚ôíÔ∏è", "–†—ã–±—ã": "‚ôìÔ∏è"
}

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton("üîÆ –ü–æ —Å–≤–æ–µ–π –∫–∞—Ä—Ç–µ"))
for sign in zodiac_signs:
    menu.add(KeyboardButton(sign))


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–∞ –ø–æ –∑–Ω–∞–∫—É ===
def generate_advice(sign):
    prompt = f"–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –º—É–¥—Ä—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –¥–ª—è –∑–Ω–∞–∫–∞ {sign} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
    try:
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("GPT –æ—à–∏–±–∫–∞:", e)
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç."


# === –°—Ç–∞—Ä—Ç ===
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ ‚ú®", reply_markup=menu)


# === –û—Ç–≤–µ—Ç –Ω–∞ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ ===
@bot.message_handler(func=lambda msg: msg.text in zodiac_signs)
def zodiac_handler(message):
    sign = message.text
    chat_id = message.chat.id
    today = datetime.now().date().isoformat()

    if chat_id in user_data and user_data[chat_id]["date"] == today:
        bot.send_message(chat_id,
            f"üîÅ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–π —Å–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ <a href=\"{CHANNEL_LINK}\">{CHANNEL_NAME}</a>",
            parse_mode="HTML")
        return

    tip = generate_advice(sign)
    user_data[chat_id] = {"sign": sign, "date": today}

    bot.send_message(chat_id,
        f"{zodiac_emojis[sign]} <b>–°–æ–≤–µ—Ç –¥–ª—è {sign}:</b>\n\n{tip}\n\nüîÆ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ <a href=\"{CHANNEL_LINK}\">{CHANNEL_NAME}</a>",
        parse_mode="HTML"
    )


# === –û—Ç–≤–µ—Ç –Ω–∞ "–ü–æ —Å–≤–æ–µ–π –∫–∞—Ä—Ç–µ" ===
@bot.message_handler(func=lambda msg: msg.text == "üîÆ –ü–æ —Å–≤–æ–µ–π –∫–∞—Ä—Ç–µ")
def in_progress(message):
    bot.send_message(message.chat.id,
        "üîß –§—É–Ω–∫—Ü–∏—è *–ø–æ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ* —Å–µ–π—á–∞—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
        parse_mode="Markdown")


# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
def send_daily_horoscopes():
    users = get_all_users()
    for user in users:
        tip = generate_advice(user["sign"])
        try:
            bot.send_message(user["chat_id"], f"üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n{tip}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user['chat_id']}: {e}")

schedule.every().day.at("08:00").do(send_daily_horoscopes)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)

import threading
threading.Thread(target=run_scheduler).start()
bot.polling()

