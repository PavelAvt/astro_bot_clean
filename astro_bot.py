import os
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from openai import OpenAI
from datetime import datetime
import requests
import schedule
import time
import swisseph as swe
from database import add_user, get_all_users, update_user_activity, set_user_sign, init_db

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENCAGE_API_KEY = os.getenv("OPENCAGE_API_KEY")
CHANNEL_LINK = "https://t.me/+lqPB3ppoz7EzMWFi"
CHANNEL_NAME = "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω–µss"
ADMIN_ID = [5197052541, 673687798]

bot = telebot.TeleBot(BOT_TOKEN)
openai_client = OpenAI(api_key=OPENAI_API_KEY)
user_data = {}
user_steps = {}

# === –ö–Ω–æ–ø–∫–∏ ===
zodiac_signs = ["–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞", "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"]
zodiac_emojis = {"–û–≤–µ–Ω": "‚ôàÔ∏è", "–¢–µ–ª–µ—Ü": "‚ôâÔ∏è", "–ë–ª–∏–∑–Ω–µ—Ü—ã": "‚ôäÔ∏è", "–†–∞–∫": "‚ôãÔ∏è", "–õ–µ–≤": "‚ôåÔ∏è", "–î–µ–≤–∞": "‚ôçÔ∏è", "–í–µ—Å—ã": "‚ôéÔ∏è", "–°–∫–æ—Ä–ø–∏–æ–Ω": "‚ôèÔ∏è",
                 "–°—Ç—Ä–µ–ª–µ—Ü": "‚ôêÔ∏è", "–ö–æ–∑–µ—Ä–æ–≥": "‚ôëÔ∏è", "–í–æ–¥–æ–ª–µ–π": "‚ôíÔ∏è", "–†—ã–±—ã": "‚ôìÔ∏è"}
menu = ReplyKeyboardMarkup(resize_keyboard=True)
for sign in zodiac_signs:
    menu.add(KeyboardButton(sign))
menu.add(KeyboardButton("ü™ê –ü–æ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ"))

# === –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è ===
def get_coordinates_by_city(city_name):
    try:
        url = f"https://api.opencagedata.com/geocode/v1/json?q={city_name}&key={OPENCAGE_API_KEY}&language=ru"
        r = requests.get(url, timeout=10)
        data = r.json()
        if data["results"]:
            return data["results"][0]["geometry"]["lat"], data["results"][0]["geometry"]["lng"]
    except Exception as e:
        print("Geo error:", e)
    return None, None

# === –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è ===
swe.set_ephe_path("ephe")
PLANETS = {
    '–°–æ–ª–Ω—Ü–µ': swe.SUN, '–õ—É–Ω–∞': swe.MOON, '–ú–µ—Ä–∫—É—Ä–∏–π': swe.MERCURY,
    '–í–µ–Ω–µ—Ä–∞': swe.VENUS, '–ú–∞—Ä—Å': swe.MARS, '–Æ–ø–∏—Ç–µ—Ä': swe.JUPITER, '–°–∞—Ç—É—Ä–Ω': swe.SATURN
}
ASPECTS = {'–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ': 0, '–û–ø–ø–æ–∑–∏—Ü–∏—è': 180, '–¢—Ä–∏–Ω': 120, '–ö–≤–∞–¥—Ä–∞—Ç': 90, '–°–µ–∫—Å—Ç–∏–ª—å': 60}
def deg_diff(a, b):
    d = abs(a - b) % 360
    return min(d, 360 - d)

def find_aspect(angle):
    for name, asp in ASPECTS.items():
        if deg_diff(angle, asp) <= 6:
            return name
    return None

def get_transits(birth_date, birth_time, lat, lon):
    day, month, year = map(int, birth_date.split('.'))
    hour, minute = map(int, birth_time.split(':'))
    birth_utc = hour + minute / 60
    jd_birth = swe.julday(year, month, day, birth_utc)
    jd_now = swe.julday(datetime.utcnow().year, datetime.utcnow().month, datetime.utcnow().day, 12)

    natal = {}
    transit = {}

    for name, code in PLANETS.items():
        lonlatdist, _ = swe.calc_ut(jd_birth, code)
        lon = lonlatdist[0]
        natal[name] = lon

        lonlatdist_tr, _ = swe.calc_ut(jd_now, code)
        lon_tr = lonlatdist_tr[0]
        transit[name] = lon_tr

    result = []
    for t_name, t_lon in transit.items():
        for n_name, n_lon in natal.items():
            angle = deg_diff(t_lon, n_lon)
            asp = find_aspect(angle)
            if asp:
                result.append(f"{t_name} {asp} –∫ –Ω–∞—Ç–∞–ª—å–Ω–æ–º—É {n_name} ({round(angle,1)}¬∞)")
    return result

def generate_natal_analysis(birth_date, birth_time, city):
    lat, lon = get_coordinates_by_city(city)
    if not lat:
        return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞: {city}"
    aspects = get_transits(birth_date, birth_time, lat, lon)
    today = datetime.now().strftime('%d.%m.%Y')
    if not aspects:
        return f"–°–µ–≥–æ–¥–Ω—è, {today}, –Ω–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤."
    text = '\n'.join(f"‚Ä¢ {a}" for a in aspects)
    prompt = (
        f"–¢—ã ‚Äî –∞—Å—Ç—Ä–æ–ª–æ–≥. –ö–ª–∏–µ–Ω—Ç —Ä–æ–¥–∏–ª—Å—è {birth_date} –≤ {birth_time} –≤ –≥–æ—Ä–æ–¥–µ {city}. "
        f"–°–µ–≥–æ–¥–Ω—è {today}. –ê—Å–ø–µ–∫—Ç—ã:\n{text}\n"
        f"–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Å—Ç–∏–ª–µ –ª–∏—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
    )
    try:
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(e)
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑."

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
@bot.message_handler(commands=["start"])
def start(message):
    add_user(message.chat.id)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–π –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É ‚ú®", reply_markup=menu)

@bot.message_handler(func=lambda msg: msg.text == "ü™ê –ü–æ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ")
def start_natal(msg):
    user_steps[msg.chat.id] = {}
    bot.send_message(msg.chat.id, "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)")

@bot.message_handler(func=lambda msg: msg.chat.id in user_steps and "birth_date" not in user_steps[msg.chat.id])
def get_date(msg):
    user_steps[msg.chat.id]["birth_date"] = msg.text.strip()
    bot.send_message(msg.chat.id, "üïì –í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–ß–ß:–ú–ú)")

@bot.message_handler(func=lambda msg: msg.chat.id in user_steps and "birth_time" not in user_steps[msg.chat.id])
def get_time(msg):
    user_steps[msg.chat.id]["birth_time"] = msg.text.strip()
    bot.send_message(msg.chat.id, "üåç –í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è")

@bot.message_handler(func=lambda msg: msg.chat.id in user_steps and "birth_time" in user_steps[msg.chat.id])
def get_city(msg):
    chat_id = msg.chat.id
    birth_date = user_steps[chat_id]["birth_date"]
    birth_time = user_steps[chat_id]["birth_time"]
    city = msg.text.strip()
    today = datetime.now().date().isoformat()

    if chat_id in user_data and user_data[chat_id].get("natal_date") == today:
        bot.send_message(chat_id,
            f'üîÅ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ <a href="{CHANNEL_LINK}">{CHANNEL_NAME}</a>',
            parse_mode="HTML")
        return

    tip = generate_natal_analysis(birth_date, birth_time, city)
    user_data[chat_id] = {"natal_date": today}
    bot.send_message(chat_id,
        f"ü™ê <b>–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n{tip}\n\nüîÆ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ <a href=\"{CHANNEL_LINK}\">{CHANNEL_NAME}</a>",
        parse_mode="HTML")
    user_steps.pop(chat_id)

@bot.message_handler(func=lambda msg: msg.text in zodiac_signs)
def zodiac_handler(msg):
    chat_id = msg.chat.id
    today = datetime.now().date().isoformat()
    set_user_sign(chat_id, msg.text)
    update_user_activity(chat_id, today)
    if chat_id in user_data and user_data[chat_id].get("date") == today:
        bot.send_message(chat_id,
            f'üîÅ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ <a href="{CHANNEL_LINK}">{CHANNEL_NAME}</a>',
            parse_mode="HTML")
        return
    prompt = f"–°–æ—Å—Ç–∞–≤—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –∑–Ω–∞–∫–∞ {msg.text} ({today}) –≤ 3‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö."
    try:
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        tip = response.choices[0].message.content.strip()
    except:
        tip = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑."
    user_data[chat_id] = {"date": today}
    bot.send_message(chat_id,
        f"{zodiac_emojis[msg.text]} <b>–°–æ–≤–µ—Ç –¥–ª—è {msg.text}:</b>\n\n{tip}\n\nüîÆ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ <a href=\"{CHANNEL_LINK}\">{CHANNEL_NAME}</a>",
        parse_mode="HTML")

@bot.message_handler(commands=["stats"])
def stats(message):
    if message.from_user.id not in ADMIN_ID:
        bot.send_message(message.chat.id, "‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    users = get_all_users()
    total = len(users)
    today = datetime.now().date().isoformat()
    active = sum(1 for u in users if u["last_active"] == today)
    bot.send_message(message.chat.id,
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –í—Å–µ–≥–æ: {total}\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è: {active}", parse_mode="HTML")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
def send_daily_horoscopes():
    users = get_all_users()
    for user in users:
        if not user["sign"]:
            continue
        prompt = f"–ö—Ä–∞—Ç–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {user['sign']} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
        try:
            r = openai_client.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}])
            bot.send_message(user["chat_id"], f"üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n{r.choices[0].message.content.strip()}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ {user['chat_id']}: {e}")

schedule.every().day.at("08:00").do(send_daily_horoscopes)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)

import threading
init_db()
threading.Thread(target=run_scheduler).start()
bot.polling()



