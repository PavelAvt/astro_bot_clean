import os
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from openai import OpenAI
from datetime import datetime
import requests
import schedule
import time
from skyfield.api import load
from database import add_user, get_all_users, update_user_activity, set_user_sign

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CHANNEL_LINK = "https://t.me/+lqPB3ppoz7EzMWFi"
CHANNEL_NAME = "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω–µss"
ADMIN_ID = YOUR_TELEGRAM_ID  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

bot = telebot.TeleBot(BOT_TOKEN)
openai_client = OpenAI(api_key=OPENAI_API_KEY)
user_data = {}

zodiac_signs = [
    "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞",
    "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
]

zodiac_emojis = {
    "–û–≤–µ–Ω": "‚ôàÔ∏è", "–¢–µ–ª–µ—Ü": "‚ôâÔ∏è", "–ë–ª–∏–∑–Ω–µ—Ü—ã": "‚ôäÔ∏è", "–†–∞–∫": "‚ôãÔ∏è",
    "–õ–µ–≤": "‚ôåÔ∏è", "–î–µ–≤–∞": "‚ôçÔ∏è", "–í–µ—Å—ã": "‚ôéÔ∏è", "–°–∫–æ—Ä–ø–∏–æ–Ω": "‚ôèÔ∏è",
    "–°—Ç—Ä–µ–ª–µ—Ü": "‚ôêÔ∏è", "–ö–æ–∑–µ—Ä–æ–≥": "‚ôëÔ∏è", "–í–æ–¥–æ–ª–µ–π": "‚ôíÔ∏è", "–†—ã–±—ã": "‚ôìÔ∏è"
}

menu = ReplyKeyboardMarkup(resize_keyboard=True)
for sign in zodiac_signs:
    menu.add(KeyboardButton(sign))


# === –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è ===

def get_moon_phase():
    ts = load.timescale()
    t = ts.now()
    eph = load('de421.bsp')
    e = eph['earth'].at(t)
    sun = e.observe(eph['sun']).apparent()
    moon = e.observe(eph['moon']).apparent()
    phase_angle = sun.separation_from(moon).degrees

    if phase_angle < 45:
        return "–ù–æ–≤–æ–ª—É–Ω–∏–µ"
    elif phase_angle < 90:
        return "–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞"
    elif phase_angle < 135:
        return "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    elif phase_angle < 180:
        return "–ü–æ—á—Ç–∏ –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    elif phase_angle < 225:
        return "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    elif phase_angle < 270:
        return "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞"
    else:
        return "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"

def get_moon_sign():
    ts = load.timescale()
    t = ts.now()
    eph = load('de421.bsp')
    earth, moon = eph['earth'], eph['moon']
    observer = earth.at(t).observe(moon).apparent()
    lon = observer.ecliptic_latlon()[1].degrees

    signs = zodiac_signs
    index = int(lon // 30)
    return signs[index]


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–∞ ===

def generate_advice(sign):
    moon_phase = get_moon_phase()
    moon_sign = get_moon_sign()

    prompt = (
        f"–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%d.%m.%Y')}. "
        f"–§–∞–∑–∞ –õ—É–Ω—ã: {moon_phase}. –õ—É–Ω–∞ –≤ –∑–Ω–∞–∫–µ {moon_sign}. "
        f"–°–æ—Å—Ç–∞–≤—å –º—É–¥—Ä—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∏ –∫—Ä–∞—Ç–∫–∏–π —Å–æ–≤–µ—Ç –¥–ª—è –∑–Ω–∞–∫–∞ {sign} (3‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), "
        f"—É—á–∏—Ç—ã–≤–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω –¥–Ω—è. –ü–∏—à–∏ –ª–µ–≥–∫–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –∫—Ä–∞—Å–∏–≤–æ."
    )

    try:
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("GPT –æ—à–∏–±–∫–∞:", e)
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç."


# === –•–µ–Ω–¥–ª–µ—Ä—ã ===

@bot.message_handler(commands=["start"])
def start(message):
    chat_id = message.chat.id
    add_user(chat_id, message.from_user.username, message.from_user.first_name)
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ ‚ú®", reply_markup=menu)

@bot.message_handler(func=lambda msg: msg.text in zodiac_signs)
def zodiac_handler(message):
    sign = message.text
    chat_id = message.chat.id
    today = datetime.now().date().isoformat()

    set_user_sign(chat_id, sign)
    update_user_activity(chat_id, today)

    if chat_id in user_data and user_data[chat_id]["date"] == today:
        bot.send_message(chat_id,
            f"üîÅ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–π —Å–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ <a href=\"{CHANNEL_LINK}\">{CHANNEL_NAME}</a>",
            parse_mode="HTML")
        return

    tip = generate_advice(sign)
    user_data[chat_id] = {"sign": sign, "date": today}

    bot.send_message(chat_id,
        f"{zodiac_emojis[sign]} <b>–°–æ–≤–µ—Ç –¥–ª—è {sign}:</b>\n\n{tip}\n\nüîÆ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ <a href=\"{CHANNEL_LINK}\">{CHANNEL_NAME}</a>",
        parse_mode="HTML"
    )

@bot.message_handler(commands=["stats"])
def stats(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return

    users = get_all_users()
    total_users = len(users)
    today = datetime.now().date().isoformat()
    active_today = sum(1 for u in users if u["last_active"] == today)

    bot.send_message(message.chat.id,
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è: <b>{active_today}</b>",
        parse_mode="HTML"
    )


# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===

def send_daily_horoscopes():
    users = get_all_users()
    for user in users:
        if not user["sign"]:
            continue
        tip = generate_advice(user["sign"])
        try:
            bot.send_message(user["chat_id"], f"üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n{tip}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user['chat_id']}: {e}")

schedule.every().day.at("08:00").do(send_daily_horoscopes)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)

import threading
threading.Thread(target=run_scheduler).start()

bot.polling()





