import os
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from openai import OpenAI
from datetime import datetime
import schedule
import time
from skyfield.api import load
from database import init_db, add_user, get_all_users, update_user_activity, set_user_sign

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===
init_db()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CHANNEL_LINK = "https://t.me/+lqPB3ppoz7EzMWFi"
CHANNEL_NAME = "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω–µss"
ADMIN_IDS = [5197052541, 673687798]

bot = telebot.TeleBot(BOT_TOKEN)
openai_client = OpenAI(api_key=OPENAI_API_KEY)
user_data = {}

zodiac_signs = [
    "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞",
    "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
]

zodiac_emojis = {
    "–û–≤–µ–Ω": "‚ôàÔ∏è", "–¢–µ–ª–µ—Ü": "‚ôâÔ∏è", "–ë–ª–∏–∑–Ω–µ—Ü—ã": "‚ôäÔ∏è", "–†–∞–∫": "‚ôãÔ∏è",
    "–õ–µ–≤": "‚ôåÔ∏è", "–î–µ–≤–∞": "‚ôçÔ∏è", "–í–µ—Å—ã": "‚ôéÔ∏è", "–°–∫–æ—Ä–ø–∏–æ–Ω": "‚ôèÔ∏è",
    "–°—Ç—Ä–µ–ª–µ—Ü": "‚ôêÔ∏è", "–ö–æ–∑–µ—Ä–æ–≥": "‚ôëÔ∏è", "–í–æ–¥–æ–ª–µ–π": "‚ôíÔ∏è", "–†—ã–±—ã": "‚ôìÔ∏è"
}

menu = ReplyKeyboardMarkup(resize_keyboard=True)
for sign in zodiac_signs:
    menu.add(KeyboardButton(sign))


# === –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è: —Ñ–∞–∑–∞ –∏ –∑–Ω–∞–∫ –õ—É–Ω—ã ===

def get_moon_data():
    ts = load.timescale()
    t = ts.now()
    eph = load('de421.bsp')
    e = eph['earth'].at(t)

    sun = e.observe(eph['sun']).apparent()
    moon = e.observe(eph['moon']).apparent()

    phase_angle = sun.separation_from(moon).degrees
    if phase_angle < 45:
        phase = "–ù–æ–≤–æ–ª—É–Ω–∏–µ"
    elif phase_angle < 90:
        phase = "–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞"
    elif phase_angle < 135:
        phase = "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    elif phase_angle < 180:
        phase = "–ü–æ—á—Ç–∏ –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    elif phase_angle < 225:
        phase = "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    elif phase_angle < 270:
        phase = "–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞"
    else:
        phase = "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"

    lon = moon.ecliptic_latlon()[1].degrees
    moon_signs = zodiac_signs
    moon_sign = moon_signs[int(lon // 30)]

    return phase, moon_sign


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ ===

def generate_advice(sign):
    moon_phase, moon_sign = get_moon_data()
    date_str = datetime.now().strftime("%d.%m.%Y")

    prompt = (
        f"–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –°–µ–≥–æ–¥–Ω—è {date_str}. "
        f"–§–∞–∑–∞ –õ—É–Ω—ã: {moon_phase}, –õ—É–Ω–∞ –≤ –∑–Ω–∞–∫–µ: {moon_sign}. "
        f"–°–æ—Å—Ç–∞–≤—å –Ω–∞—Å—Ç–æ—è—â–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –¥–ª—è –∑–Ω–∞–∫–∞ {sign}. "
        f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ª—É–Ω–Ω–æ–π —Ñ–∞–∑–µ, –ª—É–Ω–Ω–æ–º –∑–Ω–∞–∫–µ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö –∑–Ω–∞–∫–∞ {sign}. "
        f"–ü–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –Ω–µ —Å–ª–∏—à–∫–æ–º –æ–±–æ–±—â—ë–Ω–Ω–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ ‚Äî 3‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. "
        f"–°—Ç–∏–ª—å: –∫–∞–∫ —É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∞, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏ –ª–∏—à–Ω–µ–≥–æ."
    )

    try:
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("GPT –æ—à–∏–±–∫–∞:", e)
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑."


# === Telegram-—Ö–µ–Ω–¥–ª–µ—Ä—ã ===

@bot.message_handler(commands=["start"])
def start(message):
    chat_id = message.chat.id
    add_user(chat_id)
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ ‚ú®", reply_markup=menu)

@bot.message_handler(func=lambda msg: msg.text in zodiac_signs)
def zodiac_handler(message):
    sign = message.text
    chat_id = message.chat.id
    today = datetime.now().date().isoformat()

    set_user_sign(chat_id, sign)
    update_user_activity(chat_id, today)

    if chat_id in user_data and user_data[chat_id]["date"] == today:
        bot.send_message(chat_id,
            f"üîÅ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ <a href=\"{CHANNEL_LINK}\">{CHANNEL_NAME}</a>",
            parse_mode="HTML")
        return

    tip = generate_advice(sign)
    user_data[chat_id] = {"sign": sign, "date": today}

    bot.send_message(chat_id,
        f"{zodiac_emojis[sign]} <b>–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {sign}:</b>\n\n{tip}\n\nüîÆ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ <a href=\"{CHANNEL_LINK}\">{CHANNEL_NAME}</a>",
        parse_mode="HTML"
    )

@bot.message_handler(commands=["stats"])
def stats(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return

    users = get_all_users()
    total_users = len(users)
    today = datetime.now().date().isoformat()
    active_today = sum(1 for u in users if u["last_active"] == today)

    bot.send_message(message.chat.id,
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è: <b>{active_today}</b>",
        parse_mode="HTML"
    )


# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===

def send_daily_horoscopes():
    users = get_all_users()
    for user in users:
        if not user["sign"]:
            continue
        tip = generate_advice(user["sign"])
        try:
            bot.send_message(user["chat_id"], f"üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n{tip}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user['chat_id']}: {e}")

schedule.every().day.at("08:00").do(send_daily_horoscopes)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)

import threading
threading.Thread(target=run_scheduler).start()

bot.polling()






