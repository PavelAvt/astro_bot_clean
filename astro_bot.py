import os
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from openai import OpenAI
from datetime import datetime
import requests
import schedule
import time
import swisseph as swe
import math
from database import add_user, get_all_users, update_user_activity, set_user_sign

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENCAGE_API_KEY = os.getenv("OPENCAGE_API_KEY")
CHANNEL_LINK = "https://t.me/+lqPB3ppoz7EzMWFi"
CHANNEL_NAME = "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω–µss"
ADMIN_ID = [5197052541, 673687798]

bot = telebot.TeleBot(BOT_TOKEN)
openai_client = OpenAI(api_key=OPENAI_API_KEY)
user_data = {}
user_steps = {}

# === –ú–µ–Ω—é ===
zodiac_signs = [
    "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞",
    "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
]
zodiac_emojis = {
    "–û–≤–µ–Ω": "‚ôàÔ∏è", "–¢–µ–ª–µ—Ü": "‚ôâÔ∏è", "–ë–ª–∏–∑–Ω–µ—Ü—ã": "‚ôäÔ∏è", "–†–∞–∫": "‚ôãÔ∏è",
    "–õ–µ–≤": "‚ôåÔ∏è", "–î–µ–≤–∞": "‚ôçÔ∏è", "–í–µ—Å—ã": "‚ôéÔ∏è", "–°–∫–æ—Ä–ø–∏–æ–Ω": "‚ôèÔ∏è",
    "–°—Ç—Ä–µ–ª–µ—Ü": "‚ôêÔ∏è", "–ö–æ–∑–µ—Ä–æ–≥": "‚ôëÔ∏è", "–í–æ–¥–æ–ª–µ–π": "‚ôíÔ∏è", "–†—ã–±—ã": "‚ôìÔ∏è"
}
menu = ReplyKeyboardMarkup(resize_keyboard=True)
for sign in zodiac_signs:
    menu.add(KeyboardButton(sign))
menu.add(KeyboardButton("ü™ê –ü–æ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ"))

# === –ì–µ–æ–∫–æ–¥–∏–Ω–≥ ===
def get_coordinates_by_city(city_name):
    url = f"https://api.opencagedata.com/geocode/v1/json?q={city_name}&key={OPENCAGE_API_KEY}&language=ru"
    try:
        response = requests.get(url)
        data = response.json()
        if data["results"]:
            lat = data["results"][0]["geometry"]["lat"]
            lon = data["results"][0]["geometry"]["lng"]
            return lat, lon
        else:
            return None, None
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞:", e)
        return None, None

# === Swiss Ephemeris ===
swe.set_ephe_path("ephe")
PLANETS = {
    '–°–æ–ª–Ω—Ü–µ': swe.SUN, '–õ—É–Ω–∞': swe.MOON, '–ú–µ—Ä–∫—É—Ä–∏–π': swe.MERCURY,
    '–í–µ–Ω–µ—Ä–∞': swe.VENUS, '–ú–∞—Ä—Å': swe.MARS, '–Æ–ø–∏—Ç–µ—Ä': swe.JUPITER, '–°–∞—Ç—É—Ä–Ω': swe.SATURN
}
ASPECTS = {'–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ': 0, '–û–ø–ø–æ–∑–∏—Ü–∏—è': 180, '–¢—Ä–∏–Ω': 120, '–ö–≤–∞–¥—Ä–∞—Ç': 90, '–°–µ–∫—Å—Ç–∏–ª—å': 60}

def deg_diff(a, b):
    diff = abs(a - b) % 360
    return min(diff, 360 - diff)

def find_aspect(angle):
    for name, asp_angle in ASPECTS.items():
        if deg_diff(angle, asp_angle) <= 6:
            return name
    return None

def get_transits(birth_date, birth_time, lat, lon):
    day, month, year = map(int, birth_date.split('.'))
    hour, minute = map(int, birth_time.split(':'))
    birth_utc = hour + minute / 60
    jd_birth = swe.julday(year, month, day, birth_utc)
    jd_now = swe.julday(datetime.utcnow().year, datetime.utcnow().month, datetime.utcnow().day, 12)

    natal_positions = {name: swe.calc_ut(jd_birth, code)[0] for name, code in PLANETS.items()}
    transit_positions = {name: swe.calc_ut(jd_now, code)[0] for name, code in PLANETS.items()}

    aspects_found = []
    for t_name, t_lon in transit_positions.items():
        for n_name, n_lon in natal_positions.items():
            angle = deg_diff(t_lon, n_lon)
            aspect = find_aspect(angle)
            if aspect:
                aspects_found.append(f"{t_name} {aspect} –∫ –Ω–∞—Ç–∞–ª—å–Ω–æ–º—É {n_name} ({round(angle, 1)}¬∞)")
    return aspects_found

def generate_natal_analysis(birth_date, birth_time, city):
    lat, lon = get_coordinates_by_city(city)
    if lat is None or lon is None:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞."
    aspects = get_transits(birth_date, birth_time, lat, lon)
    today = datetime.now().strftime('%d.%m.%Y')
    if not aspects:
        return f"–°–µ–≥–æ–¥–Ω—è, {today}, –Ω–µ—Ç —Å–∏–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤. –≠—Ç–æ —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è."
    aspect_text = '\n'.join(f"‚Ä¢ {a}" for a in aspects)
    prompt = (
        f"–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –ö–ª–∏–µ–Ω—Ç —Ä–æ–¥–∏–ª—Å—è {birth_date} –≤ {birth_time} –≤ –≥–æ—Ä–æ–¥–µ {city} "
        f"(—à–∏—Ä–æ—Ç–∞: {lat}, –¥–æ–ª–≥–æ—Ç–∞: {lon}). –°–µ–≥–æ–¥–Ω—è {today}. –í–æ—Ç —Ç—Ä–∞–Ω–∑–∏—Ç—ã:\n{aspect_text}\n"
        f"–ü–æ—è—Å–Ω–∏, –∫–∞–∫ —ç—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –µ–≥–æ –¥–µ–Ω—å. –°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3‚Äì5 –∞–±–∑–∞—Ü–µ–≤, –∫–∞–∫ –ª–∏—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é."
    )
    try:
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("GPT –æ—à–∏–±–∫–∞:", e)
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑."

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@bot.message_handler(commands=["start"])
def start(message):
    chat_id = message.chat.id
    add_user(chat_id)
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏–ª–∏ –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É ‚ú®", reply_markup=menu)

@bot.message_handler(func=lambda msg: msg.text == "ü™ê –ü–æ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ")
def natal_start(message):
    user_steps[message.chat.id] = {}
    bot.send_message(message.chat.id, "üìÖ –í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

@bot.message_handler(func=lambda msg: user_steps.get(msg.chat.id, {}).get("step") is None and "." in msg.text)
def natal_date(message):
    user_steps[message.chat.id]["birth_date"] = message.text.strip()
    user_steps[message.chat.id]["step"] = "time"
    bot.send_message(message.chat.id, "üïì –í–≤–µ–¥–∏ —Å–≤–æ—ë –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")

@bot.message_handler(func=lambda msg: user_steps.get(msg.chat.id, {}).get("step") == "time")
def natal_time(message):
    user_steps[message.chat.id]["birth_time"] = message.text.strip()
    user_steps[message.chat.id]["step"] = "city"
    bot.send_message(message.chat.id, "üåç –í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è")

@bot.message_handler(func=lambda msg: user_steps.get(msg.chat.id, {}).get("step") == "city")
def natal_city(message):
    chat_id = message.chat.id
    birth_date = user_steps[chat_id]["birth_date"]
    birth_time = user_steps[chat_id]["birth_time"]
    city = message.text.strip()
    today = datetime.now().date().isoformat()

    if chat_id in user_data and user_data[chat_id].get("natal_date") == today:
        bot.send_message(chat_id,
            f'üîÅ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ <a href="{CHANNEL_LINK}">{CHANNEL_NAME}</a>',
            parse_mode="HTML")
        return

    tip = generate_natal_analysis(birth_date, birth_time, city)
    user_data[chat_id] = {"natal_date": today}
    bot.send_message(chat_id, f"ü™ê <b>–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n{tip}", parse_mode="HTML")

@bot.message_handler(func=lambda msg: msg.text in zodiac_signs)
def zodiac_handler(message):
    sign = message.text
    chat_id = message.chat.id
    today = datetime.now().date().isoformat()
    set_user_sign(chat_id, sign)
    update_user_activity(chat_id, today)
    if chat_id in user_data and user_data[chat_id].get("date") == today:
        bot.send_message(chat_id,
            f'üîÅ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ <a href="{CHANNEL_LINK}">{CHANNEL_NAME}</a>',
            parse_mode="HTML")
        return
    prompt = (
        f"–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%d.%m.%Y')}. "
        f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∏ –º—É–¥—Ä—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –¥–ª—è –∑–Ω–∞–∫–∞ {sign}, —É—á–∏—Ç—ã–≤–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω –¥–Ω—è."
    )
    try:
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        tip = response.choices[0].message.content.strip()
    except:
        tip = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç."
    user_data[chat_id] = {"sign": sign, "date": today}
    bot.send_message(chat_id, f"{zodiac_emojis[sign]} <b>–°–æ–≤–µ—Ç –¥–ª—è {sign}:</b>\n\n{tip}", parse_mode="HTML")

@bot.message_handler(commands=["stats"])
def stats(message):
    if message.from_user.id not in ADMIN_ID:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return
    users = get_all_users()
    total = len(users)
    today = datetime.now().date().isoformat()
    active_today = sum(1 for u in users if u["last_active"] == today)
    bot.send_message(message.chat.id, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –í—Å–µ–≥–æ: {total}\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è: {active_today}", parse_mode="HTML")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
def send_daily_horoscopes():
    users = get_all_users()
    for user in users:
        if not user["sign"]:
            continue
        prompt = f"–¢—ã ‚Äî –∞—Å—Ç—Ä–æ–ª–æ–≥. –°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%d.%m.%Y')}. –°–æ—Å—Ç–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç –¥–ª—è –∑–Ω–∞–∫–∞ {user['sign']}."
        try:
            response = openai_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            tip = response.choices[0].message.content.strip()
            bot.send_message(user["chat_id"], f"üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n{tip}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user['chat_id']}: {e}")

schedule.every().day.at("08:00").do(send_daily_horoscopes)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)

import threading
threading.Thread(target=run_scheduler).start()
bot.polling()



